# Generated by Django 3.2.16 on 2024-12-12 07:25

import detailing.validators
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import smart_selects.db_fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('autos', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='StaffUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone_number', models.CharField(blank=True, max_length=12, validators=[detailing.validators.phone_number_validator], verbose_name='Номер телефона')),
                ('additional_phone_number', models.CharField(blank=True, max_length=12, validators=[detailing.validators.phone_number_validator], verbose_name='Доп. номер телефона')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'сотрудник',
                'verbose_name_plural': 'Сотрудники',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ClientUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=32, verbose_name='Имя')),
                ('last_name', models.CharField(blank=True, max_length=32, verbose_name='Фамилия')),
                ('phone_number', models.CharField(blank=True, max_length=12, null=True, validators=[detailing.validators.phone_number_validator], verbose_name='Номер телефона')),
                ('friendly', models.BooleanField(default=True, help_text='Дружелюбный?')),
                ('solvent', models.BooleanField(default=True, help_text='Платежеспособный?')),
                ('next_visit', models.DateField(blank=True, null=True, verbose_name='Планируемая дата следующего посещения')),
                ('additional_phone_number', models.CharField(blank=True, max_length=12, null=True, validators=[detailing.validators.phone_number_validator], verbose_name='Доп. номер телефона')),
            ],
            options={
                'verbose_name': 'клиент',
                'verbose_name_plural': 'Клиенты',
            },
        ),
        migrations.CreateModel(
            name='Flaw',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to='detailing/flaws/', verbose_name='Фото нестотатков')),
            ],
        ),
        migrations.CreateModel(
            name='FlawTitle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=64, verbose_name='Название недостатка')),
            ],
            options={
                'verbose_name': 'недостаток',
                'verbose_name_plural': 'Недостатки',
            },
        ),
        migrations.CreateModel(
            name='Work',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128, verbose_name='Наименование услуги')),
                ('price', models.PositiveIntegerField(verbose_name='Стоимость услуги')),
                ('description', models.CharField(max_length=1024, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'услуга',
                'verbose_name_plural': 'Услуги',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stars', models.IntegerField(choices=[(5, 'Отлично'), (4, 'Хорошо'), (3, 'Средне'), (2, 'Плохо'), (1, 'Ужасно')], default=5, verbose_name='Оценка')),
                ('description', models.TextField(max_length=256, verbose_name='Текст отзыва')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='detailing.clientuser', verbose_name='Заказчик/клиент')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('discount', models.PositiveIntegerField(blank=True, null=True, verbose_name='Скидка')),
                ('date', models.DateField(auto_now_add=True, verbose_name='Дата создания заказ-наряда')),
                ('is_done', models.BooleanField(default=False, verbose_name='Выполнены ли работы в полном объеме')),
                ('description', models.CharField(blank=True, max_length=1024, verbose_name='Примечания')),
                ('auto', smart_selects.db_fields.ChainedForeignKey(auto_choose=True, chained_field='client', chained_model_field='owner', on_delete=django.db.models.deletion.CASCADE, to='autos.auto', verbose_name='Авто, с которым проводятся работы')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='orders', to='detailing.clientuser', verbose_name='Заказчик/клиент')),
                ('executor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orders', to=settings.AUTH_USER_MODEL, verbose_name='Ответственный сотрудник')),
                ('flaws', models.ManyToManyField(blank=True, through='detailing.Flaw', to='detailing.FlawTitle', verbose_name='Недостатки/повреждения')),
                ('works', models.ManyToManyField(blank=True, related_name='orders', to='detailing.Work', verbose_name='Проводимые работы')),
            ],
            options={
                'verbose_name': 'заказ-наряд',
                'verbose_name_plural': 'Заказ-наряды',
            },
        ),
        migrations.AddField(
            model_name='flaw',
            name='order',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='detailing.order', verbose_name='З/н'),
        ),
        migrations.AddField(
            model_name='flaw',
            name='title',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flaws', to='detailing.flawtitle', verbose_name='Название недостатка'),
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visit_time', models.DateTimeField(verbose_name='Планируемая дата и время посещения')),
                ('description', models.CharField(blank=True, max_length=1024, verbose_name='Описание')),
                ('auto', smart_selects.db_fields.ChainedForeignKey(auto_choose=True, chained_field='client', chained_model_field='owner', on_delete=django.db.models.deletion.CASCADE, to='autos.auto', verbose_name='Авто, с которым будут проводиться работы')),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='appointments', to='detailing.clientuser', verbose_name='Заказчик/клиент')),
            ],
            options={
                'verbose_name': 'запись',
                'verbose_name_plural': 'Записи',
            },
        ),
    ]
